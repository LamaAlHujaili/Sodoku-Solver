#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <chrono>   // For std::chrono timing
#include <numeric>  // for std::accumulate
#include <omp.h>    // Include OpenMP for parallelization

const int N = 9; // Size of the Sudoku grid (9x9)
const int ITERATIONS = 10; // Number of iterations

class Sudoku {
public:
    Sudoku() {
        grid.resize(N, std::vector<int>(N, 0));
        fillDiagonal();
        solveSudoku();
    }

    void print() {
        for (const auto& row : grid) {
            for (int num : row) {
                std::cout << (num == 0 ? '.' : num) << ' ';
            }
            std::cout << std::endl;
        }
    }

private:
    std::vector<std::vector<int>> grid;

    // Parallelize fillDiagonal using OpenMP
    void fillDiagonal() {
        #pragma omp parallel for
        for (int i = 0; i < N; i += 3) {
            fillBox(i, i);
        }
    }

    // Parallelize fillBox function
    void fillBox(int row, int col) {
        std::vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        std::shuffle(nums.begin(), nums.end(), std::mt19937{std::random_device{}()});
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                grid[row + i][col + j] = nums[i * 3 + j];
            }
        }
    }

    // Parallelize isSafe using OpenMP sections
    bool isSafe(int row, int col, int num) {
        bool safe = true;

        #pragma omp parallel sections
        {
            #pragma omp section
            {
                for (int x = 0; x < N && safe; ++x) {
                    if (grid[row][x] == num) {
                        safe = false;
                    }
                }
            }

            #pragma omp section
            {
                for (int x = 0; x < N && safe; ++x) {
                    if (grid[x][col] == num) {
                        safe = false;
                    }
                }
            }

            #pragma omp section
            {
                int boxRowStart = row - row % 3;
                int boxColStart = col - col % 3;
                for (int i = 0; i < 3 && safe; ++i) {
                    for (int j = 0; j < 3 && safe; ++j) {
                        if (grid[boxRowStart + i][boxColStart + j] == num) {
                            safe = false;
                        }
                    }
                }
            }
        }

        return safe;
    }

    bool solveSudoku() {
        int row = -1;
        int col = -1;
        bool isEmpty = false;
        for (int i = 0; i < N && !isEmpty; ++i) {
            for (int j = 0; j < N && !isEmpty; ++j) {
                if (grid[i][j] == 0) {
                    row = i;
                    col = j;
                    isEmpty = true;
                }
            }
        }

        if (!isEmpty) {
            return true;  // Puzzle solved
        }

        for (int num = 1; num <= N; ++num) {
            if (isSafe(row, col, num)) {
                grid[row][col] = num;
                if (solveSudoku()) {
                    return true;
                }
                grid[row][col] = 0; // Backtrack
            }
        }
        return false; // Trigger backtracking
    }
};

int main() {
    std::vector<double> wholeSudokuTimes;

    for (int i = 0; i < ITERATIONS; ++i) {
        // Start the timer for the whole Sudoku creation
        auto start = std::chrono::high_resolution_clock::now();

        Sudoku sudoku; // Create and solve the Sudoku puzzle

        // Stop the timer for the entire Sudoku creation
        auto end = std::chrono::high_resolution_clock::now();
        double wholeSudokuTime = std::chrono::duration<double>(end - start).count();

        // Store the whole Sudoku time
        wholeSudokuTimes.push_back(wholeSudokuTime);

        std::cout << "\nIteration " << (i + 1) << " complete.\n";
        std::cout << "Whole Sudoku Creation and Solving Time: " << wholeSudokuTime << " seconds\n";

        // Print the solved Sudoku
        std::cout << "Solved Sudoku:\n";
        sudoku.print();
    }

    // Calculate and display average times
    auto average = [](const std::vector<double>& times) {
        return std::accumulate(times.begin(), times.end(), 0.0) / times.size();
    };

    std::cout << "\nAverage Whole Sudoku Creation and Solving Time after " << ITERATIONS << " iterations: " << average(wholeSudokuTimes) << " seconds\n";

    return 0;
}
