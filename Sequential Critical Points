#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <ctime>
#include <numeric>

const int N = 9; // Size of the Sudoku grid (9x9)
const int ITERATIONS = 10; // Number of iterations

class Sudoku {
public:
    Sudoku(double& gridCreationTime, double& fillDiagonalTime, double& solveSudokuTime, double& fillBoxTime) {
        // Start the clock for grid creation
        clock_t start = clock();
        grid.resize(N, std::vector<int>(N, 0));
        clock_t end = clock();
        gridCreationTime = static_cast<double>(end - start) / CLOCKS_PER_SEC;

        // Start the clock for diagonal filling
        start = clock();
        fillDiagonal(fillBoxTime); // Passing the reference for fillBox timing
        end = clock();
        fillDiagonalTime = static_cast<double>(end - start) / CLOCKS_PER_SEC;

        // Start the clock for solving the Sudoku
        start = clock();
        solveSudoku();
        end = clock();
        solveSudokuTime = static_cast<double>(end - start) / CLOCKS_PER_SEC;
    }

    void print() {
        for (const auto& row : grid) {
            for (int num : row) {
                std::cout << (num == 0 ? '.' : num) << ' ';
            }
            std::cout << std::endl;
        }
    }

private:
    std::vector<std::vector<int>> grid;

    void fillDiagonal(double& fillBoxTime) {
        for (int i = 0; i < N; i += 3) {
            clock_t start = clock();
            fillBox(i, i);
            clock_t end = clock();
            fillBoxTime += static_cast<double>(end - start) / CLOCKS_PER_SEC; // Accumulate time for each fillBox call
        }
    }

    void fillBox(int row, int col) {
        std::vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        std::shuffle(nums.begin(), nums.end(), std::mt19937{std::random_device{}()});
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                grid[row + i][col + j] = nums[i * 3 + j];
            }
        }
    }

    bool isSafe(int row, int col, int num) {
        for (int x = 0; x < N; ++x) {
            if (grid[row][x] == num || grid[x][col] == num) {
                return false;
            }
        }

        int boxRow = row - row % 3;
        int boxCol = col - col % 3;
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (grid[i + boxRow][j + boxCol] == num) {
                    return false;
                }
            }
        }
        return true;
    }

    bool solveSudoku() {
        int row = -1;
        int col = -1;
        bool isEmpty = false;
        for (int i = 0; i < N && !isEmpty; ++i) {
            for (int j = 0; j < N && !isEmpty; ++j) {
                if (grid[i][j] == 0) {
                    row = i;
                    col = j;
                    isEmpty = true;
                }
            }
        }

        if (!isEmpty) {
            return true;
        }

        for (int num = 1; num <= N; ++num) {
            if (isSafe(row, col, num)) {
                grid[row][col] = num;
                if (solveSudoku()) {
                    return true;
                }
                grid[row][col] = 0;
            }
        }

        return false;
    }
};

int main() {
    std::vector<double> gridCreationTimes;
    std::vector<double> fillDiagonalTimes;
    std::vector<double> solveSudokuTimes;
    std::vector<double> fillBoxTimes;
    std::vector<double> printTimes;

    for (int i = 0; i < ITERATIONS; ++i) {
        double gridCreationTime = 0.0;
        double fillDiagonalTime = 0.0;
        double solveSudokuTime = 0.0;
        double fillBoxTime = 0.0;
        double printTime = 0.0;

        Sudoku sudoku(gridCreationTime, fillDiagonalTime, solveSudokuTime, fillBoxTime);

        // Start the clock for printing
        clock_t start = clock();
        sudoku.print();
        clock_t end = clock();
        printTime = static_cast<double>(end - start) / CLOCKS_PER_SEC;

        // Store the times
        gridCreationTimes.push_back(gridCreationTime);
        fillDiagonalTimes.push_back(fillDiagonalTime);
        solveSudokuTimes.push_back(solveSudokuTime);
        fillBoxTimes.push_back(fillBoxTime);
        printTimes.push_back(printTime);

        std::cout << "\nIteration " << (i + 1) << " complete.\n";
        std::cout << "Grid Creation: " << gridCreationTime << " seconds\n";
        std::cout << "fillBox(): " << fillBoxTime << " seconds\n";
        std::cout << "fillDiagonal(): " << fillDiagonalTime << " seconds\n";
        std::cout << "Solving Sudoku: " << solveSudokuTime << " seconds\n";
        std::cout << "Print Function: " << printTime << " seconds\n";
    }

    // Calculate and display average times
    auto average = [](const std::vector<double>& times) {
        return std::accumulate(times.begin(), times.end(), 0.0) / times.size();
    };

    std::cout << "\nAverages after " << ITERATIONS << " iterations:\n";
    std::cout << "Average Grid Creation Time: " << average(gridCreationTimes) << " seconds\n";
    std::cout << "Average fillBox Time: " << average(fillBoxTimes) << " seconds\n";
    std::cout << "Average fillDiagonal Time: " << average(fillDiagonalTimes) << " seconds\n";
    std::cout << "Average Solving Time: " << average(solveSudokuTimes) << " seconds\n";
    std::cout << "Average Print Time: " << average(printTimes) << " seconds\n";

    return 0;
}
